<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
  <script src="script.js"></script>
  <title>Webprogrammierung</title>
</head>
<body>
<header>
  <h1>Webprogrammierung</h1>
</header>
<main>
  <section>
    <ol>

      <li>
        <article>
          <h3>Was ist HTML?</h3>
          <section>
            <ul>
              <li>Hyper Text Markup Language</li>
              <li>Auszeichnungsprache (beschreibende Sprache)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Warum ist HTML keine Programmiersprache?</h3>
          <section>
            <ul>
              <li>
                HTML hat keine Logik:
                <ul>
                  <li>keine Variablen</li>
                  <li>keine Berechnungen / Rechenoperationen</li>
                  <li>keine Anweisungen</li>
                  <li>keine <a href="http://www.if-schleife.de/" target="_blank">Verzweigungen</a></li>
                  <li>keine Iterationen</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Warum ist HTML keine Programmiersprache?</h3>
          <section>
            <ul>
              <li>
                HTML hat keine Logik:
                <ul>
                  <li>keine Variablen</li>
                  <li>keine Rechenoperationen</li>
                  <li>keine Anweisungen</li>
                  <li>keine Verzweigungen</li>
                  <li>keine Iterationen</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist neu in HTML 5?</h3>
          <section>
            <ul>
              <li>neue semantische Tags</li>
              <li>
                neue Input-Types (telephone, url, email, search, number, range)
                <ul>
                  <li>semantischer</li>
                  <li>Prüfungen werden durchgeführt</li>
                  <li>erweiterte Funktionalitäten im Browser</li>
                </ul>
              </li>
              <li>Multimedia ohne Plugin (video-, audio-Tag)</li>
              <li>Javascript = Standard Scriptsprache</li>
              <li>Dokumenttypdeklaration ist kürzer</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne Beispiele für HTML 5 Elemente und erläutere!</h3>
          <section>
            <ul>
              <li>
                section
                <ul>
                  <li>thematische Gruppierung von Inhalten</li>
                </ul>
              </li>
              <li>
                article
                <ul>
                  <li>in sich geschlossener Abschnitt</li>
                </ul>
              </li>
              <li>
                main
                <ul>
                  <li>Hauptanzeigefläche</li>
                </ul>
              </li>
              <li>
                nav
                <ul>
                  <li>Navigationsbereich</li>
                </ul>
              </li>
              <li>
                header
                <ul>
                  <li>sichtbarer Kopfbereich oder eines Teils der Seite</li>
                </ul>
              </li>
              <li>
                footer
                <ul>
                  <li>Fußzeile</li>
                </ul>
              </li>
              <li>
                aside
                <ul>
                  <li>Inhalt nur in indirekten Zusammenhang mit umgebenden Inhalt</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wann ist ein HTML-Dokument valide?</h3>
          <section>
            <ul>
              <li>entspricht <i>syntaktisch und semantisch</i> dem W3C-Standard</li>
              <li>
                semantisch bspw.:
                <ul>
                  <li>Block- nicht in Inline-Elementen</li>
                  <li>head und body</li>
                  <li>Listenelemente in Listenknoten</li>
                  <li>Inputs nur innerhalb Formular</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wann ist ein HTML-Dokument wohlgeformt?</h3>
          <section>
            <ul>
              <li>entspricht <i>syntaktisch</i> dem W3C-Standard</li>
              <li>
                bspw.:
                <ul>
                  <li>Doctype-Angabe</li>
                  <li>geschlossene Tags</li>
                  <li>nur eine Wurzel</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was passiert bei fehlender Dokumenttypdeklaration (DOCTYPE)?</h3>
          <section>
            <ul>
              <li>Browser interpretiert in Quirks- oder Almost-Standard-Mode</li>
              <li>Querksmode: alles intern nach eigener Interpretation</li>
              <li>Almost-Standard: weitestgehend Einhalten der Regeln</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was heißt CSS und wofür ist es da?</h3>
          <section>
            <ul>
              <li>Cascading Style Sheet</li>
              <li>optische Erscheinungsbild ändern</li>
              <li>Manipulation der Markup-Language-Elemente</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Woraus besteht ein CSS-Dokument?</h3>
          <section>
            <ul>
              <li>Selektoren mit einem oder mehreren Attributen</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche Hauptselektoren gibt es?</h3>
          <section>
            <ul>
              <li>Tag-Selektor (tagname)</li>
              <li>Class-Selektor (.)</li>
              <li>Id-Selektor (#)</li>
              <li>Nachfahren-Selektor ( )</li>
              <li>Kind-Selektor (>)</li>
              <li>Allgemeiner-Geschwister-Selektor (~)</li>
              <li>Angrenzender-Geschwister-Selektor (+)</li>
              <li>Universalselektor (*)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche Pseudoklassen gibt es?</h3>
          <section>
            <ul>
              <li>:hover</li>
              <li>:active</li>
              <li>:focus</li>
              <li>:visited</li>
              <li>:target</li>
              <li>:checked</li>
              <li>:selected</li>
              <li>:only-child</li>
              <li>:not()</li>
              <li>:first-child</li>
              <li>:last-child</li>
              <li>:nth-child(n) ... n = Zahl/Keyword/Formel</li>
              <li>:first-of-type</li>
              <li>:last-of-type</li>
              <li>:nth-of-type(n) ... n = Zahl/Keyword/Formel</li>
              <li>...</li>
              <li>:enabled</li>
              <li>:disabled</li>
              <li>:root</li>
              <li>:valid</li>
              <li>:invalid</li>
              <li>:link</li>
              <li>:empty</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche Pseudoelemente gibt es?</h3>
          <section>
            <ul>
              <li>::before</li>
              <li>::after</li>
              <li>::first-letter</li>
              <li>::first-line</li>
              <li>::selection</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist Spezifität in CSS?</h3>
          <section>
            <ul>
              <li>Punktewertsystem für CSS-Selektoren</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welcher Selektor besitzt wie viele Punkte?</h3>
          <section>
            <ul>
              <li>inline - 1000</li>
              <li>id - 100</li>
              <li>class - 10</li>
              <li>tag - 1</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wie kann die Spezifität außer Kraft gesetzt werden?</h3>
          <section>
            <ul>
              <li>"!important" hinter Attribut</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne CSS 3 Selektoren und erläutere!</h3>
          <section>
            <ul>
              <li>
                Allgemeiner-Geschwister-Selektor (~)
                <ul>
                  <li>selektiert <i>alle nachfolgenden</i> Geschwister (gleiches Elternelement)</li>
                </ul>
              </li>
              <li>
                Attribut-Selektor ([])
                <ul>
                  <li>[attribut] &rarr; wählt Elemente mit diesem Attribut</li>
                  <li>[attribut=wert] &rarr; wählt Elemente mit diesem Attribut und Wert</li>
                  <li>[attribut~=string] &rarr; wählt Elemente mit diesem Attribut und "string" enthaltendem Wert</li>
                  <li>[attribut^=string] &rarr; wählt Elemente mit diesem Attribut und "string" beginnendem Wert</li>
                  <li>[attribut$=string] &rarr; wählt Elemente mit diesem Attribut und "string" endendem Wert</li>
                </ul>
              </li>
              <li>
                n'ter-Typ-Selektor (:nth-of-type(n))
                <ul>
                  <li>wählt alle Elemente, die das n'te Element ihres Elternelements sind</li>
                </ul>
              </li>
              <li>
                :not(selector)
                <ul>
                  <li>wählt alle Elemente, die nicht "selector" entsprechen</li>
                </ul>
              </li>
              <li>
                :empty
                <ul>
                  <li>wählt alle Elemente, die keine Kinder haben</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>In welche zwei Gruppen kann man Schriftgrößen unterteilen und was ist der Unterschied?</h3>
          <section>
            <ul>
              <li>
                feste (absolute)
                <ul>
                  <li>unabhängig, feste Einheit</li>
                  <li>bspw. px, pt</li>
                </ul>
              </li>
              <li>
                variable (relative)
                <ul>
                  <li>abhängig von einer anderen festgelegten Größe</li>
                  <li>bspw. em (≙ einem Geviert der Schriftgröße des <i>Elternelements</i> (großes M))</li>
                  <li>bspw. rem (≙ einem Geviert der Schriftgröße des <i>Wurzelelements</i> (großes M))</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was sind CSS-Präprozessoren?</h3>
          <section>
            <ul>
              <li>Programmiersprachen</li>
              <li>Parsen zu normalem CSS</li>
              <li>Variablen</li>
              <li>Funktionen / Mixing</li>
              <li>echte Berechnungen</li>
              <li>Anweisungen, Verzweigungen, Iterationen</li>
              <li>Wiederverwendung</li>
              <li>Sauberkeit</li>
              <li>bspw. SASS, LESS</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was bedeutet "responsive"?</h3>
          <section>
            <ul>
              <li>Webseite passt sich Endgerät an</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was sind Media-Queries? (Medienabfragen)</h3>
          <section>
            <ul>
              <li>fragen nach Eigenschaften von Ausgabegerät</li>
              <li>Regeln werden je nach Eigenschaften festgelegt</li>
              <li>
                Beispiele für Merkmale:
                <ul>
                  <li>width</li>
                  <li>height</li>
                  <li>orientation</li>
                  <li>resolution</li>
                  <li>light-level</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wie können CSS-Animationen realisiert werden?</h3>
          <section>
            <ul>
              <li>
                Keyframes:
                <ul>
                  <li>Zustände als Keyframes</li>
                  <li>Pro Keyframe Angabe von Attributen</li>
                  <li>Rechner ermittelt Zwischenzustände</li>
                </ul>
              </li>
              <li>
                Transitions:
                <ul>
                  <li>Übergang von einem in anderen Zustand</li>
                  <li>Angabe von zu änderndem Attribut</li>
                  <li>Rechner ermittelt Zwischenzustände</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist HTTP?</h3>
          <section>
            <ul>
              <li>Hyper Text Transfer Protocol</li>
              <li>dient zum Austausch von Nachrichten zwischen zwei Partnern in einem Netzwerk (Art und Weise, wie)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne weitere Protokolle!</h3>
          <section>
            <ul>
              <li>TCP/IP (Transmission Control Protocol / Internet Protocol)</li>
              <li>FTP (File Transfer Protocol)</li>
              <li>POP (Post Office Protocol)</li>
              <li>IMAP (Internet Message Access Protocol)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist ein Protokoll?</h3>
          <section>
            <ul>
              <li>Legt fest auf welche Art und Weise Nachrichten in einem Netzwerk zwischen Partnern augetauscht werden</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wofür benötigt man Protokolle?</h3>
          <section>
            <ul>
              <li>Übertragung wird gesichert(Empfänger versteht Sender)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wie ist HTTP aufgebaut?</h3>
          <section>
            <ul>
              <li>
                Request
                <ul>
                  <li>Request-Line (Methode, URL, HTTP-Version)</li>
                  <li>Header (Host, geforderte Sprache, unterstützte Datentypen, Codierung)</li>
                  <li>Leerzeile</li>
                  <li>Body (Daten (POST))</li>
                </ul>
              </li>
              <li>
                <i>Beispiel 1</i>
                <pre>GET /search?key1=value1&key2=value2 HTTP/1.1
Host: www.google.de
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de-de,en-us
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8</pre>
              </li>
              <li>
                <i>Beispiel 2</i>
                <pre>POST /search HTTP/1.1
Host: www.google.de
Content-Type: application/x-www-form-urlencoded
Content-Length: 24
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: de-de,en-us
Accept-Encoding: gzip,deflate
Accept-Charset: ISO-8859-1,utf-8

key1=value1&key2=value2
</pre>
              </li>
              <li>
                Response
                <ul>
                  <li>Status-Line (HTTP-Version, Status)</li>
                  <li>Header (Content-Type, Content-Length, LAst-Modified, Codierung, Date)</li>
                  <li>Leerzeile</li>
                  <li>Body (Daten)</li>
                </ul>
              </li>
              <li>
                <i>Beispiel</i>
                <pre><script class="not-parse" type="text/plain">HTTP/1.1 200 OK
Server: Apache/2.0.49
Content-Language: de
Content-Type: text/html
Content-Encoding: gzip
Content-Lengt: 33

<!DOCTYPE html><html><head><title>Testseite</title></head><body><h1>Nur eine doofe Testseite</h1></body></html></script></pre>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne die Statuscodes und ihre Bedeutung!</h3>
          <section>
            <ul>
              <li>1xx - Information</li>
              <li>2xx - Erfolg</li>
              <li>3xx - Weiterleitung</li>
              <li>4xx - Clientfehler</li>
              <li>5xx - Serverfehler</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist der Unterschied zwischen GET und POST?</h3>
          <section>
            <ul>
              <li>
                GET:
                <ul>
                  <li>Parameter in URL</li>
                  <li>1-2 kB</li>
                  <li>durch Webform oder Link</li>
                </ul>
              </li>
              <li>
                POST:
                <ul>
                  <li>Parameter in Body</li>
                  <li>theoretisch unbegrenzte Größe</li>
                  <li>durch Webform</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche Zeichencodierungen gibt es?</h3>
          <section>
            <ul>
              <li>ASCI (7 bit, 128 Zeichen)</li>
              <li>ANSI (8 bit, 256 Zeichen, 0-127 == ASCII)</li>
              <li>UTF-8 (4 Byte (Multibyte), 0-127 == ASCII)</li>
              <li>...</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist das DOM?</h3>
          <section>
            <ul>
              <li>Document Object Model</li>
              <li>Spezifikation einer Schnittstelle</li>
              <li>Markup-Language-Dokumente in Baumstruktur objektorientiert darstellen</li>
              <li>auf Elemente zugreifen, manipulieren</li>
              <li>Beziehungen zwischen Knoten</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche DOM-Knotenarten gibt es, erläutere?</h3>
          <section>
            <ul>
              <li>
                Root-Knoten
                <ul>
                  <li>Elternelement: keines</li>
                  <li>Geschwister: keine</li>
                </ul>
              </li>
              <li>
                Element-Knoten
                <ul>
                  <li>Elternelement: Root- / Elementknoten</li>
                  <li>Nachbarn: alle außer Root / keine</li>
                  <li>Geschwister: alle außer Root / keine</li>
                  <li>Kinder: alle außer Root / keine</li>
                </ul>
              </li>
              <li>
                Attribut-Knoten
                <ul>
                  <li>Elternelement: Root- / Elementknoten</li>
                  <li>Nachbarn: alle außer Root / keine</li>
                  <li>Geschwister: alle außer Root / keine</li>
                  <li>Kinder: Textknoten / keine</li>
                </ul>
              </li>
              <li>
                Text-Knoten
                <ul>
                  <li>Elternelement: Root- / Elementknoten</li>
                  <li>Nachbarn: alle außer Root / keine</li>
                  <li>Geschwister: alle außer Root / keine</li>
                  <li>Kinder: keine</li>
                </ul>
              </li>
              <li>Kommentar-Knoten</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was bedeutet ECMA?</h3>
          <section>
            <ul>
              <li>European Computer Manufacturers Association</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist Javascript?</h3>
          <section>
            <ul>
              <li>Skriptsprache (kein Compiler, nur Interpreter)</li>
              <li>funktional</li>
              <li>imperativ</li>
              <li>objektorientiert</li>
              <li>prototypenbasiert</li>
              <li>multiparadigmatisch</li>
              <li>schwach typisiert (lose Datentypbindung)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was bedeutet prototypenbasiert?</h3>
          <section>
            <ul>
              <li>keine Veerbung</li>
              <li>keine eigenen Klassen</li>
              <li>Definition von Prototypen</li>
              <li>Instanziieren von Objekten aus Prototypen</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was bedeutet "schwach typisiert"?</h3>
          <section>
            <ul>
              <li>Datentypen nicht festgelegt</li>
              <li>mögliche Datentypänderung während Laufzeit</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche Probleme kann es durch lose Datentypbindung geben?</h3>
          <section>
            <ul>
              <li>Programmierer verantwortlich für richtigen Datentyp</li>
              <li>Äquivalenz muss geprüft werden</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was sind Event-Handler?</h3>
          <section>
            <ul>
              <li>
                Codefragmente, die:
                <ul>
                  <li>mit Benutzereingaben umgehen</li>
                  <li>Benutzereingaben auswerten</li>
                  <li>dementsprechend weitere Aktionen ausführen</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne Operatoren und ihre zugehörige Gruppe!</h3>
          <section>
            <ul>
              <li>
                Arithmetische Operatoren:
                <ul>
                  <li>+ Addition</li>
                  <li>- Subtraktion</li>
                  <li>* Multiplikation</li>
                  <li>/ Division</li>
                  <li>% Modulo</li>
                  <li>++ Inkrement</li>
                  <li>-- Dekrement</li>
                </ul>
              </li>
              <li>
                Zuweisungsoperatoren:
                <ul>
                  <li>= Zuweisung</li>
                  <li>+= Additionszuweisung</li>
                  <li>-= Subtraktionszuweisung</li>
                  <li>*= Multiplikationszuweisung</li>
                  <li>/= Divisionszuweisung</li>
                  <li>%= Modulozuweisung</li>
                  <li>&= bitweise AND-Zuweisung</li>
                  <li>|= bitweise OR-Zuweisung</li>
                  <li>^= bitweise XOR-Zuweisung</li>
                  <li>&lt;&lt;= Leftshift-Zuweisung</li>
                  <li>&gt;&gt;= Rightshift-Zuweisung</li>
                  <li>&gt;&gt;&gt;= Unsigned-Rightshift-Zuweisung</li>
                </ul>
              </li>
              <li>
                Logische Operatoren:
                <ul>
                  <li>&& Logisches UND</li>
                  <li>|| Logisches ODER</li>
                  <li>! Logisches NICHT (Negation)</li>
                </ul>
              </li>
              <li>
                Vergleichsoperatoren:
                <ul>
                  <li>== Gleichheit</li>
                  <li>=== Äquivalenz</li>
                  <li>!= Ungleichheit</li>
                  <li>!== nicht äquivalent (negierte Äquivalenz)</li>
                  <li>&lt; Kleiner-Als</li>
                  <li>&gt; Größer-Als</li>
                  <li>&lt;= Kleiner-Gleich</li>
                  <li>&gt;= Größer-Gleich</li>
                </ul>
              </li>
              <li>
                Bitweise Operatoren:
                <ul>
                  <li>& bitweise AND</li>
                  <li>| bitweise OR</li>
                  <li>^ bitweise XOR</li>
                  <li>~ bitweise NOT</li>
                  <li>&lt;&lt; Leftshift</li>
                  <li>&gt;&gt; Rightshift</li>
                  <li>&gt;&gt;&gt; unsigned Rightshift (Zerofill)</li>
                </ul>
              </li>
              <li>
                Weitere Operatoren:
                <ul>
                  <li>... ? ... : ... ternäre Operator</li>
                  <li>() Gruppierungsoperator</li>
                  <li>{} Objekt-Initialisierungs-Operator</li>
                  <li>new Instanzoperator</li>
                  <li>. Member-Access-Operator</li>
                  <li>[] Computed-Member-Access-Operator</li>
                </ul>
              </li>
              <li>
                Spezielle Operatoren:
                <ul>
                  <li>typeof</li>
                  <li>delete</li>
                  <li>instanceof</li>
                  <li>void</li>
                  <li>await</li>
                  <li>yield</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was bedeutet DOM-Manipulation?</h3>
          <section>
            <ul>
              <li>Zugreifen, Ändern, Löschen, Hinzufügen von DOM-Elemente</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne Javascript-Funktionen zum Zugriff auf DOM-Elemente und erläutere!</h3>
          <section>
            <ul>
              <li>
                document.querySelector(selector)
                <ul>
                  <li>Auswahl-Parameter: CSS-Selektor</li>
                  <li>Rückgabe: erstes gefundenes Element</li>
                </ul>
              </li>
              <li>
                document.querySelectorAll(selector)
                <ul>
                  <li>Auswahl-Parameter: CSS-Selektor</li>
                  <li>Rückgabe: alle Elemente, die dem CSS-Selektor entsprechen in einer Node-List (Array-ähnlich)</li>
                </ul>
              </li>
              <li>
                document.getElementById(id)
                <ul>
                  <li>Auswahl-Parameter: Element-ID</li>
                  <li>Rückgabe: Element mit ID</li>
                </ul>
              </li>
              <li>
                document.getElementsByClassName(class)
                <ul>
                  <li>Auswahl-Parameter: Element-Klasse</li>
                  <li>Rückgabe: alle Elemente der Klasse in einer Node-List (Array-ähnlich)</li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist der Unterschied zwischen den Eigenschaften innerHTML und innerText?</h3>
          <section>
            <ul>
              <li>
                innerHTML:
                <ul>
                  <li>
                    Als Getter:
                    <ul>
                      <li>gibt untergeordnete HTML-Struktur des Elements als String zurück</li>
                    </ul>
                    Als Setter:
                    <ul>
                      <li>Löschen aller Kind-Knoten unterhalb des Elements</li>
                      <li>String wird als HTML-Struktur zu DOM-Baum geparst</li>
                      <li>erzeugter Baum wird unterhalb des Elements eingesetzt</li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li id="test">
                innerText:
                <ul>
                  <li>
                    Als Getter:
                    <ul>
                      <li>gibt Inhalt aller Textknoten unterhalb des Elements zurück</li>
                    </ul>
                    Als Setter:
                    <ul>
                      <li>Löschen aller Kind-Knoten unterhalb des Elements</li>
                      <li>Erzeugen eines Textknotens als Kindknoten des Elements</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist AJAX?</h3>
          <section>
            <ul>
              <li>Asychronous Javascript And XML</li>
              <li>asynchrone Datenübertragung zwischen Client und Server per HTTP-Request</li>
              <li>asynchron = nebenläufig, unabhängig von Programmablauf</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Welche AJAX-ReadyStates gibt es?</h3>
          <section>
            <ul>
              <li>0: UNSENT &rarr; XMLHttpRequest-Objekt instanziiert</li>
              <li>1: OPENED &rarr; open()-Methode aufgerufen</li>
              <li>2: HEADERS RECEIVED &rarr; send()-Methode aufgerufen</li>
              <li>3: LOADING &rarr; Body erhalten, Downloading</li>
              <li>4: DONE &rarr; Alles beendet / Fehler</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Wie kann auf den HTTP-Response-Body bei einer AJAX-Request zugegriffen werden?</h3>
          <section>
            <ul>
              <li>... .responseText-Eigenschaft (Variable) des XMLHttpRequest-Objekts</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist JSON?</h3>
          <section>
            <ul>
              <li>JavaScript Object Notation</li>
              <li>Datenaustauschformat</li>
              <li>Notation als JavaScript-Objekt (Name-Wert-Paare)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was sind die Vorteile von JSON?</h3>
          <section>
            <ul>
              <li>schlank</li>
              <li>gut von Mensch und Maschine lesbar</li>
              <li>Implementation in vielen Programmiersprachen</li>
              <li>liegt schon als Objekt vor</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Nenne weitere Datenaustauschformate!</h3>
          <section>
            <ul>
              <li>XML</li>
              <li>GAEB</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was sind Cookies?</h3>
          <section>
            <ul>
              <li>Datenspeicher</li>
              <li>Textdateien</li>
              <li>Name-Wert-Paare</li>
              <li>Austausch zwischen Server und Client</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist Local-Storage?</h3>
          <section>
            <ul>
              <li>ähnlich Cookies</li>
              <li>Name-Wert-Paare</li>
              <li><i>kein</i> Austausch zwischen Server und Client</li>
              <li>Daten werden nicht gelöscht (Gültigkeit bleibt erhalten)</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Was ist der Unterschied zwischen Cookies und Local-Storage?</h3>
          <section>
            <ul>
              <li>bei Local-Storage <i>kein</i> Austausch Client &harr; Server</li>
            </ul>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Schreibe einen AJAX-Request!</h3>
          <section>
            <pre>// XMLHttpRequest-Objekt initialisieren
var xHttpReq = new XMLHttpRequest();

// onreadystatechange-Methode ändern (Aufruf bei Änderung des ReadyStates)
xHttpReq.onreadystatechange = function () {
  // Fertig und keine Fehler
  if (xHttpReq.readyState == 4 && xHttpReq.status == 200) {
    console.log('Ich habe nach Dingen gesucht!');
    console.log('Ich habe Dinge gefunden:');

    // Logge den Body der HTTP-Response
    console.log(xHttpReq.responseText);
  }
}

// AJAX-Request öffnen
xHttpReq.open('POST', 'http://google.de/search-with-post', true);

// Sende AJAX-Request mit Daten
xHttpReq.send('query=dinge');</pre>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Schreibe eine AJAX-Request mit Callback!</h3>
          <section>
            <pre>function ajaxRequestWithCallback(callback) {

  // XMLHttpRequest-Objekt initialisieren
  var xHttpReq = new XMLHttpRequest();

  // onreadystatechange-Methode ändern (Aufruf bei Änderung des ReadyStates)
  xHttpReq.onreadystatechange = function () {
    // Fertig und keine Fehler
    if (xHttpReq.readyState == 4 && xHttpReq.status == 200) {
      callback(xHttpReq.responseText);
    }
  }

  // AJAX-Request öffnen
  xHttpReq.open('GET', 'http://komische-url.de/?hut=mexikanisch', true);

  // Sende AJAX-Request
  xHttpReq.send();

}</pre>
          </section>
        </article>
      </li>

      <li>
        <article>
          <h3>Definiere folgende Klasse in Javascript:<br>
              Name der Klasse: Stift()<br>
              Eigenschaften: Farbe (= rot), Material (= Plaste)<br>
              Methoden: zeichne() (Parameter a und b, Rückgabe: a – b), setFarbe(), setMaterial()<br>
              Instanziiere ein Objekt der Klasse!
          </h3>
          <section>
            <pre>
function Stift() {
  this.farbe = 'rot';
  this.material = 'Plaste';

  this.zeichnen = function(a, b) {
    return Math.abs(a – b);
  }

  this.setFarbe = function(farbe){
    this.farbe = farbe;
  }

  this.setMaterial = function(material){
	this.material = material;
  }
}

var kuli = new Stift();</pre>
          </section>
        </article>
      </li>

    </ol>
  </section>
</main>
</body>
</html>